#encoding:utf-8
'''
品类实体类
'''
import uuid
from django.db import models
from system.models import SysUser
from extra.storage import ImageStorage
from DjangoUeditor.models import UEditorField

# Create your models here.
class MatType(models.Model):
    '''
    类型类
    '''
    id           = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    parent       = models.ForeignKey('self',null=True,blank=True,on_delete=models.CASCADE,db_constraint=False,verbose_name=u'上级分类')
    code         = models.CharField(max_length=50,null=False,db_index=True,unique=True,verbose_name=u'分类编码')
    name         = models.CharField(max_length=150,null=False,db_index=True,verbose_name=u'分类名称')
    remark       = models.TextField(default='',null=True,blank=True,max_length=200,verbose_name=u'备注')#UEditorField(width=600, height=300, toolbars="full", imagePath="upload/remark/%(basename)s_%(datetime)s.%(extname)s", filePath="upload/remark/", upload_settings={"imageMaxSize":5242880},default='',verbose_name=u'备注')
    enable       = models.BooleanField(default=True,verbose_name=u'是否启用')
    erp_id       = models.BigIntegerField(null=True,blank=True,editable=False,verbose_name=u'ERPID')
    created_at   = models.DateTimeField(auto_now_add=True,verbose_name=u'创建时间',null=True,blank=True)
    created_by   = models.ForeignKey(SysUser,null=True,blank=True,on_delete=models.SET_NULL,db_constraint=False, editable=False,verbose_name=u'创建人', related_name='mattype_created_by')
    updated_at   = models.DateTimeField(auto_now=True,verbose_name=u'修改时间',null=True,blank=True)
    updated_by   = models.ForeignKey(SysUser,null=True,blank=True,on_delete=models.SET_NULL,db_constraint=False, editable=False,verbose_name=u'修改人', related_name='mattype_updated_by')

    def __str__(self):
        return self.name+'('+self.code+')'

    def matcount(self):
        return self.material_set.all().count()

    matcount.short_description = u'包含商品数量'

    class Meta:
        verbose_name = u'商品类型'
        verbose_name_plural = verbose_name


class Material(models.Model):
    '''
    商品类
    '''
    id           = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    mattype      = models.ForeignKey(MatType,null=True,blank=True,on_delete=models.SET_NULL,db_constraint=False, verbose_name=u'所属类别')
    sku          = models.CharField(default=None,max_length=50,unique=True,null=False,db_index=True,verbose_name=u'SKU')
    name         = models.CharField(max_length=150,null=False,db_index=True,verbose_name=u'菜品名称')
    price        = models.FloatField(default=0,verbose_name=u'单价')
    description  = UEditorField(width=600, height=300, toolbars="full", imagePath="upload/material/%(basename)s_%(datetime)s.%(extname)s", filePath="upload/material/", upload_settings={"imageMaxSize":5242880},default='',verbose_name=u'描述')
    image        = models.ImageField(upload_to=u'upload/material/%Y/%m', null=True, blank=True, verbose_name=u'图片', storage=ImageStorage())
    enable       = models.BooleanField(default=True,verbose_name=u'是否启用')
    unit         = models.CharField(max_length=50,null=True,blank=True,db_index=True,verbose_name=u'单位')
    spc          = models.CharField(max_length=50,null=True,blank=True,db_index=True,verbose_name=u'规格')
    remark       = models.TextField(default='',null=True,blank=True,max_length=200,verbose_name=u'备注')
    created_at   = models.DateTimeField(auto_now_add=True,verbose_name=u'创建时间',null=True,blank=True)
    created_by   = models.ForeignKey(SysUser,null=True,blank=True,on_delete=models.SET_NULL,db_constraint=False, editable=False,verbose_name=u'创建人', related_name='material_created_by')
    updated_at   = models.DateTimeField(auto_now=True,verbose_name=u'修改时间',null=True,blank=True)
    updated_by   = models.ForeignKey(SysUser,null=True,blank=True,on_delete=models.SET_NULL,db_constraint=False, editable=False,verbose_name=u'修改人', related_name='material_updated_by')
        
    def __str__(self):
        if self.mattype is not None:
            return '['+str(self.mattype)+'] '+self.name
        else:
            return self.name

    class Meta:
        verbose_name = u'商品信息'
        verbose_name_plural = verbose_name
