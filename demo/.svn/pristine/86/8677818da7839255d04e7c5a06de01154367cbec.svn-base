#encoding:utf-8

import xadmin
from xadmin import views
from .models import *

'''
客户管理后台功能
'''
class CarInline(object):
    model = Car
    extra = 0
    style = 'accordion' 
    fields = '__all__'

class PaymentInfoInline(object):
    model = PaymentInfo
    extra = 0
    fk_name = 'customer'
    style = 'accordion' 
    #fields = '__all__'
    exclude = ['createdby', 'updatedby']

class ReceiveInfoInline(object):
    model = ReceiveInfo
    extra = 0
    fk_name = 'customer'
    style = 'accordion' 
    #fields = '__all__'
    exclude = ['createdby', 'updatedby']
    
class SellerAddressInline(object):
    model = Address
    extra = 0
    #fields = '__all__'   
    exclude = ['is_recive', ]
    readonly_fields = ['is_default']
    style = 'address_accordion' 
    template = 'xadmin/address/edit_inline/accordion.html'

    def queryset(self):
        queryset = super(SellerAddressInline, self).queryset() 
        queryset = queryset.filter(is_pickup=True)
        return queryset

    def get_field_attrs(self, db_field, **kwargs):
        from xadmin import widgets
        from django.db.models import CharField
        from xadmin.plugins.address import XAdminAddressWidget
        if db_field.name in ['province', 'city', 'region']:
            return {'widget': widgets.AdminSelectWidget}
        elif db_field.name == 'address':
            if isinstance(db_field, CharField):
                widget = db_field.formfield().widget   
                attrs = widget.attrs
                attrs['class'] = 'text-field'
                return {'widget': XAdminAddressWidget(attrs)}
        else:    
            return super(SellerAddressInline, self).get_field_attrs(db_field, **kwargs)    
            # if db_field.name == 'is_pickup':
            #     obj.update({'class':'hidden'})
            return obj
          
    def block_extrahead(self, context, nodes):  # 在生成的页面中加入自定义的 js 文件
        _js = '<script type="text/javascript" src="%s&key=%s&plugin=AMap.Autocomplete,AMap.DistrictSearch"></script>' % (settings.GAODEMAP_URL, settings.GAODEMAP_KEY)
        nodes.append(_js)

    def formfield_for_dbfield(self, db_field, **kwargs):
        field = super(SellerAddressInline, self).formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == 'is_pickup':
            field.initial = True    
            #field.widget.attrs.update({'readonly':'readonly'})
            #field.widget.media._js.append('<script>console.log($(this))</script>')
        return field

class ServiceAddressInline(object):
    model = Address
    extra = 0
    #fields = '__all__'   
    exclude = ['is_pickup',]
    readonly_fields = ['is_default']
    style = 'address_accordion' 
    template = 'xadmin/address/edit_inline/accordion.html'

    def queryset(self):
        queryset = super(ServiceAddressInline, self).queryset() 
        queryset = queryset.filter(is_recive=True)
        return queryset

    def get_field_attrs(self, db_field, **kwargs):
        from xadmin import widgets
        from django.db.models import CharField
        from xadmin.plugins.address import XAdminAddressWidget
        if db_field.name in ['province', 'city', 'region']:
            return {'widget': widgets.AdminSelectWidget}
        elif db_field.name == 'address':
            if isinstance(db_field, CharField):
                widget = db_field.formfield().widget   
                attrs = widget.attrs
                attrs['class'] = 'text-field'
                return {'widget': XAdminAddressWidget(attrs)}
        else:            
            return super(ServiceAddressInline, self).get_field_attrs(db_field, **kwargs)    
          
    def block_extrahead(self, context, nodes):  # 在生成的页面中加入自定义的 js 文件
        _js = '<script type="text/javascript" src="%s&key=%s&plugin=AMap.Autocomplete,AMap.DistrictSearch"></script>' % (settings.GAODEMAP_URL, settings.GAODEMAP_KEY)
        nodes.append(_js)

    def formfield_for_dbfield(self, db_field, **kwargs):
        field = super(ServiceAddressInline, self).formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == 'is_recive':
            field.initial = True    
            #field.widget.attrs.update({'readonly':'readonly'})
            #field.widget.media._js.append('<script>console.log($(this))</script>')
        return field

class CustomerAdmin(object):
    '''
    普通用户管理
    '''
    list_display = ['mobile', 'nickname', 'other']
    search_fields = ['mobile', 'nickname']
    list_filter = ['mobile', 'nickname', 'status']
    list_editable = ['status']
    readonly_fields = ['mobile', 'other']
    #relfield_style = 'fk-ajax'
    #address_fields = ['address']
    #style_fields = {"address": "address"}
    exclude = ['company', 'grade', 'status', 'deposit', 'money', 'workingtime', 'emergencycontact', 'emergencyphone' ,'drivinglicense']
    #inlines = [CarInline, PaymentInfoInline]
    model_icon = 'fa fa-users'

    def queryset(self):
        '''
        过滤仅显示普通用户
        '''
        queryset = super(CustomerAdmin, self).queryset()
        queryset = queryset.exclude(is_seller=True,is_service=True)
        return queryset

    def get(self, request, *args, **kwargs):
        response = super(CustomerAdmin, self).get(request, *args, **kwargs)
        if 'add' in response.context_data.keys():
            if response.context_data['add']:
                '''
                如果是新增状态下,没有只读字段
                '''
                self.readonly_fields = ['grade', 'deposit', 'money', 'other']
                self.prepare_form()
                self.instance_forms()
                self.setup_forms()
                response = self.get_response()

        return response

    def save_models(self):
        '''
        后台新增用户时,如果手机号没有收到赋值,则重新取一次
        '''
        if self.org_obj is None:
            self.new_obj.created_by = self.request.user
        else:
            self.new_obj.updated_by = self.request.user
        if self.request.method == 'POST' and self.org_obj is None and (self.new_obj.mobile == '' or self.new_obj.mobile is None):
            self.new_obj.mobile = self.request.POST['mobile']
        
        super(CustomerAdmin, self).save_models()

xadmin.site.register(Customer, CustomerAdmin)

class SellerCustomerAdmin(object):
    '''
    商家管理
    '''
    list_display = ['mobile', 'nickname',  'company', 'grade', 'status', 'deposit', 'money', 'other']
    search_fields = ['mobile', 'nickname', 'company']
    list_filter = ['grade', 'status', 'deposit']
    list_editable = ['status']
    list_display_links = ['mobile', 'nickname', 'company']
    readonly_fields = ['mobile', 'grade', 'deposit', 'money', 'other']
    #relfield_style = 'fk-ajax'
    #address_fields = ['address']
    exclude = ['is_seller', 'is_service', 'drivinglicense']
    inlines = [CarInline, PaymentInfoInline, SellerAddressInline]
    model_icon = 'fa fa-grav'

    def queryset(self):
        '''
        过滤仅显示商家
        '''
        queryset = super(SellerCustomerAdmin, self).queryset()
        queryset = queryset.filter(is_seller=True)
        return queryset

    def get_field_attrs(self, db_field, **kwargs):
        from django.db.models import FloatField
        #from django.forms.widgets import NumberInput
        if db_field.name == 'workingtime': 
            widget = db_field.formfield().widget   
            widget.attrs.update({'min':0,'class':'text-field','form_class': FloatField})
            #return widget.attrs
            attrs = super(SellerCustomerAdmin, self).get_field_attrs(db_field, **kwargs) 
            # attrs.update({'widget': })
            return attrs
        else:            
            return super(SellerCustomerAdmin, self).get_field_attrs(db_field, **kwargs)    

    def get(self, request, *args, **kwargs):
        response = super(SellerCustomerAdmin, self).get(request, *args, **kwargs)
        if 'add' in response.context_data.keys():
            if response.context_data['add']:
                '''
                如果是新增状态下,没有只读字段
                '''
                self.readonly_fields = ['grade', 'deposit', 'money', 'other']
                self.prepare_form()
                self.instance_forms()
                self.setup_forms()
                response = self.get_response()

        return response

    def save_models(self):
        '''
        后台新增用户时,如果手机号没有收到赋值,则重新取一次
        '''
        if self.org_obj is None:
            self.new_obj.created_by = self.request.user
        else:
            self.new_obj.updated_by = self.request.user
        if self.request.method == 'POST' and self.org_obj is None and (self.new_obj.mobile == '' or self.new_obj.mobile is None):
            self.new_obj.mobile = self.request.POST['mobile']
        
        self.new_obj.is_seller = True
        super(SellerCustomerAdmin, self).save_models()

xadmin.site.register(SellerCustomer, SellerCustomerAdmin)

class ServicerCustomerAdmin(object):
    '''
    商家管理
    '''
    list_display = ['mobile', 'nickname',  'company', 'grade', 'status', 'deposit', 'money', 'other']
    search_fields = ['mobile', 'nickname', 'company']
    list_filter = ['grade', 'status', 'deposit']
    list_editable = ['status']
    list_display_links = ['mobile', 'nickname', 'company']
    readonly_fields = ['mobile', 'grade', 'deposit', 'money', 'other']
    #relfield_style = 'fk-ajax'
    #address_fields = ['address']
    #style_fields = {"address": "address"}
    exclude = ['is_seller', 'is_service']
    inlines = [CarInline, ReceiveInfoInline,ServiceAddressInline]
    model_icon = 'fa fa-truck'

    def queryset(self):
        '''
        过滤仅显示服务商
        '''
        queryset = super(ServicerCustomerAdmin, self).queryset()
        queryset = queryset.filter(is_service=True)
        return queryset

    def get(self, request, *args, **kwargs):
        response = super(ServicerCustomerAdmin, self).get(request, *args, **kwargs)
        if 'add' in response.context_data.keys():
            if response.context_data['add']:
                '''
                如果是新增状态下,没有只读字段
                '''
                self.readonly_fields = ['grade', 'deposit', 'money', 'other']
                self.prepare_form()
                self.instance_forms()
                self.setup_forms()
                response = self.get_response()

        return response

    def save_models(self):
        '''
        后台新增用户时,如果手机号没有收到赋值,则重新取一次
        '''
        if self.org_obj is None:
            self.new_obj.created_by = self.request.user
        else:
            self.new_obj.updated_by = self.request.user
        if self.request.method == 'POST' and self.org_obj is None and (self.new_obj.mobile == '' or self.new_obj.mobile is None):
            self.new_obj.mobile = self.request.POST['mobile']

        self.new_obj.is_service = True
        
        super(ServicerCustomerAdmin, self).save_models()

xadmin.site.register(ServicerCustomer, ServicerCustomerAdmin)

# class PaymentInfoAdmin(object):
#     '''
#     客户收款账户管理
#     '''
#     list_display = ['customer', 'accounttype', 'accountname', 'account', 'is_default']
#     search_fields = ['customer', 'accounttype', 'accountname', 'account']

# xadmin.site.register(PaymentInfo,PaymentInfoAdmin)

# class CarAdmin(object):
#     '''
#     客户汽车管理
#     '''
#     list_display = ['customer', 'car_number', 'drivinglicense', 'is_cold_chain']
#     search_fields = ['customer', 'car_number', 'drivinglicense', 'is_cold_chain']
#     list_editable = ['car_number', 'drivinglicense', 'is_cold_chain']

# xadmin.site.register(Car,CarAdmin)

# class AddressAdmin(object):
#     '''
#     地址管理
#     '''
#     list_display = ['customer', 'province', 'city', 'region', 'address', 'is_recive', 'is_pickup', 'is_default']
#     search_fields = ['customer', 'province', 'city', 'region', 'address', 'is_recive', 'is_pickup',]
#     list_filter = ['customer', 'province', 'city']
#     list_editable = ['is_recive', 'is_pickup', 'is_default']
#     relfield_style = 'fk-ajax'
#     style_fields = {"address": "address"}
#     add_form_template = 'xadmin/address/gaode_district_model_form.html'
#     change_form_template = 'xadmin/address/gaode_district_model_form.html'

#     def get_field_attrs(self, db_field, **kwargs):
#         from xadmin import widgets
#         if db_field.name in ['province', 'city', 'region']:
#             return {'widget': widgets.AdminSelectWidget}
#         else:            
#             return super(AddressAdmin, self).get_field_attrs(db_field, **kwargs)
        
# xadmin.site.register(Address,AddressAdmin)
