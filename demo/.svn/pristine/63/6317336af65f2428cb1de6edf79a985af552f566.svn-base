#encoding:utf-8
'''
品类后台管理
'''
import xadmin
from xadmin import views
from .models import *
#from xadmin.filters import FILTER_PREFIX, SEARCH_VAR

class MatTypelInline(object):
    '''
    嵌入类别管理中的类别管理
    '''
    model = MatType
    extra = 0
    exclude = ['created_by', 'updated_by']
    style = 'accordion' 
    #template = 'xadmin/edit_inline/list_inline.html'

class MaterialInline(object):
    '''
    嵌入类别管理中的商品管理
    '''
    model = Material
    extra = 0
    exclude = ['created_by', 'updated_by']
    style = 'accordion' 
    

class MatTypeAdmin(object):
    list_display = ['code', 'name', 'remark', 'enable', 'image', 'parent', 'matcount', 'created_at', 'created_by', 'updated_at', 'updated_by']
    search_fields = ['code', 'name', 'enable', 'parent__code', 'parent__name']
    list_filter = ['code', 'name', 'parent', 'enable']
    list_editable = ['enable']
    #style_fields = {"remark": "ueditor"}
    model_icon = 'fa fa-shopping-basket'
    inlines = [MatTypelInline,MaterialInline]
    ordering = ('parent','code',)

    object_list_template = 'xadmin/views/model_tree.html'

    tree_query = MatType.objects.filter(parent__isnull=True).order_by('code')
    tree_key_field = 'id'
    tree_display_field = 'name'
    tree_search_field = 'parent__id'
    
    def get_parent(self,obj):
        if obj.parent == None:
            return [str(obj.id)]
        else:
            l = [str(obj.parent_id)]
            l.extend(self.get_parent(obj.parent))
            return l

    def get_child(self,obj, field, p, stop = None):
        #l = []          
        html = '' 
        for item in obj.mattype_set.all():  
            #d = dict()
            key = str(getattr(item,self.tree_key_field))
            value = getattr(item,self.tree_display_field)
            #d['key'] = str(getattr(item,self.tree_key_field))
            #d['value'] = getattr(item,self.tree_display_field)
            #print(item.mattype_set.filter(**{self.tree_key_field:stop}).query)
            if key == stop or key in p:#item.mattype_set.filter(**{self.tree_key_field:stop}).exists():
                #d['selected'] = True 
                if item.mattype_set.all().count() > 0:
                    html += '<div class="panel-group" role="tablist" aria-multiselectable="true">'
                    html += '<div class="panel panel-default">'
                    html += '<div class="panel-heading" role="tab">'
                    html += '<h4 class="panel-title">'
                    html += '<a class="collapsed" role="button" data-key="%s" href="?%s=%s">' % (key, field, key)
                    html += value
                    html += '</a>'
                    html += '</h4>'
                    html += '</div>'
                    html += '<div class="panel-collapse collapse in">'
                    html += '<div class="panel-body">'
                    html += '<div class="list-group">'
                    html += self.get_child(item, field, p, stop)
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                else:
                    html += '<a href="?%s=%s" class="list-group-item" style="background-color: #f5f5f5;">%s</a>' % (field, key, value)            
            else:
                html += '<a href="?%s=%s" class="list-group-item">%s</a>' % (field, key, value)
            #l.append(d)
        return html

    def get_tree(self):
        l = []
        k = xadmin.plugins.relate.RELATE_PREFIX + self.tree_search_field + '__exact'
        s = None
        p = None        
        if k in self.request.GET.keys():
            s = self.request.GET.get(k)
            try:
                p = self.model.objects.get(**{self.tree_key_field:s})
                p = self.get_parent(p)
            except Exception as e:
                raise e
                pass

        if self.tree_query is not None:
            html = ""
            for item in self.tree_query:
                #d = dict()
                key = str(getattr(item,self.tree_key_field))
                value = getattr(item,self.tree_display_field)
                if p is not None and key in p:
                    #html += self.get_child(item, k, s)
                    html += '<div class="panel-group" role="tablist" aria-multiselectable="true">'
                    html += '<div class="panel panel-default">'
                    html += '<div class="panel-heading" role="tab">'
                    html += '<h4 class="panel-title">'
                    html += '<a class="collapsed" role="button" data-key="%s" href="?%s=%s">' % (key, k, key)
                    html += value
                    html += '</a>'
                    html += '</h4>'
                    html += '</div>'
                    html += '<div class="panel-collapse collapse in">'
                    html += '<div class="panel-body">'
                    html += '<div class="list-group">'
                    html += self.get_child(item, k, p, s)
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                else:
                    html += '<a href="?%s=%s" class="list-group-item">%s</a>' % (k, key, value)
                #l.append(d)

        return html

    def get_context(self):        
        new_context = {
            'tree_query': self.get_tree(),
            'tree_key_field': self.tree_key_field,
            'tree_display_field': self.tree_display_field,
            'tree_search_field': xadmin.plugins.relate.RELATE_PREFIX + self.tree_search_field + '__exact',
        } 
        context = super(MatTypeAdmin, self).get_context()
        context.update(new_context)
        return context

    def save_models(self):
        if self.org_obj is None:
            self.new_obj.created_by = self.request.user
            self.new_obj.save()
        else:
            self.new_obj.updated_by = self.request.user
            self.new_obj.save()

xadmin.site.register(MatType, MatTypeAdmin)

class MaterialAdmin(object):
    list_display = ['mattype', 'sku', 'name', 'price', 'description', 'image', 'enable', 'remark', 'created_at', 'created_by', 'updated_at', 'updated_by']
    search_fields = ['mattype__name', 'name', 'enable',]
    list_filter = ['mattype', 'name', 'enable']
    list_editable = ['enable']
    style_fields = {"description": "ueditor"}
    list_display_links = ['sku', 'name']
    model_icon = 'fa fa-apple'

    object_list_template = 'xadmin/views/model_tree.html'

    tree_query = MatType.objects.filter(parent__isnull=True).order_by('code')
    tree_key_field = 'id'
    tree_display_field = 'name'
    tree_search_field = 'mattype__id'
    
    def get_parent(self,obj):
        if obj.parent == None:
            return [str(obj.id)]
        else:
            l = [str(obj.parent_id)]
            l.extend(self.get_parent(obj.parent))
            return l

    def get_child(self,obj, field, p, stop = None):
        html = '' 
        for item in obj.mattype_set.all():  
            key = str(getattr(item,self.tree_key_field))
            value = getattr(item,self.tree_display_field)
            if key == stop or key in p:
                if item.mattype_set.all().count() > 0:
                    html += '<div class="panel-group" role="tablist" aria-multiselectable="true">'
                    html += '<div class="panel panel-default">'
                    html += '<div class="panel-heading" role="tab">'
                    html += '<h4 class="panel-title">'
                    html += '<a class="collapsed" role="button" data-key="%s" href="?%s=%s">' % (key, field, key)
                    html += value
                    html += '</a>'
                    html += '</h4>'
                    html += '</div>'
                    html += '<div class="panel-collapse collapse in">'
                    html += '<div class="panel-body">'
                    html += '<div class="list-group">'
                    html += self.get_child(item, field, p, stop)
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                else:
                    html += '<a href="?%s=%s" class="list-group-item" style="background-color: #f5f5f5;">%s</a>' % (field, key, value)            
            else:
                html += '<a href="?%s=%s" class="list-group-item">%s</a>' % (field, key, value)
            #l.append(d)
        return html

    def get_tree(self):
        l = []
        k = xadmin.plugins.relate.RELATE_PREFIX + self.tree_search_field + '__exact'
        s = None
        p = None        
        if k in self.request.GET.keys():
            s = self.request.GET.get(k)
            try:
                p = MatType.objects.get(**{self.tree_key_field:s})
                p = self.get_parent(p)
            except Exception as e:
                raise e
                pass

        if self.tree_query is not None:
            html = ""
            for item in self.tree_query:
                #d = dict()
                key = str(getattr(item,self.tree_key_field))
                value = getattr(item,self.tree_display_field)
                if p is not None and key in p:
                    #html += self.get_child(item, k, s)
                    html += '<div class="panel-group" role="tablist" aria-multiselectable="true">'
                    html += '<div class="panel panel-default">'
                    html += '<div class="panel-heading" role="tab">'
                    html += '<h4 class="panel-title">'
                    html += '<a class="collapsed" role="button" data-key="%s" href="?%s=%s">' % (key, k, key)
                    html += value
                    html += '</a>'
                    html += '</h4>'
                    html += '</div>'
                    html += '<div class="panel-collapse collapse in">'
                    html += '<div class="panel-body">'
                    html += '<div class="list-group">'
                    html += self.get_child(item, k, p, s)
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                    html += '</div>'
                else:
                    html += '<a href="?%s=%s" class="list-group-item">%s</a>' % (k, key, value)
                #l.append(d)

        return html

    def get_context(self):
        
        new_context = {
            'tree_query': self.get_tree(),
            'tree_key_field': self.tree_key_field,
            'tree_display_field': self.tree_display_field,
            'tree_search_field': xadmin.plugins.relate.RELATE_PREFIX + self.tree_search_field + '__exact',
        } 
        context = super(MaterialAdmin, self).get_context()
        context.update(new_context)
        return context

    def save_models(self):
        if self.org_obj is None:
            self.new_obj.created_by = self.request.user
            self.new_obj.save()
        else:
            self.new_obj.updated_by = self.request.user
            self.new_obj.save()

xadmin.site.register(Material, MaterialAdmin)
