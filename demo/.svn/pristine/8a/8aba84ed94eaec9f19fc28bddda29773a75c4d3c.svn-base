#encoding:utf-8

'''
用户的api集合
'''
import coreapi
from django.db import transaction
from api.response import api_paging, JsonResponse, log, DocParam, get_parameter_dic
from api.permission import checkToken
from rest_framework import viewsets
from rest_framework.views import APIView
from rest_framework.decorators import (
    api_view,permission_classes, detail_route,action,list_route
)
from rest_framework.permissions import AllowAny
from user.models import *
from user.serializers import *
from django.db.models import Q
from api.models import customer_auth
from datetime import datetime

class get_customers(APIView):
    '''
    获取用户列表
    '''
    coreapi_fields = (
        DocParam('search',required=False,type='string',description=u'模糊搜索字段,根据mobile,nickname,company,email检索'),
        DocParam('identity',required=False,type='string',description=u'用户身份,"seller"是商家,"service"是服务商,"norm"是普通客户,为空则无论身份'),
        DocParam('status',required=False,type='int',description=u'用户状态,-1是所有状态,0是停用,1是启用,默认是启用状态'),
    )

    def get(self, request):
        params = get_parameter_dic(request)
        queryset = Customer.objects.all()
        if ' status' in params.keys():
            if params['status'] == -1 or params['status'] == '-1':
                pass
            else:
                queryset = queryset.filter(status=params['status'])

        if 'identity' in params.keys() and params['identity'] in ['seller', 'service', 'norm']:
            if params['identity'] == 'seller':
                queryset = queryset.filter(is_seller=True)
            elif params['identity'] == 'service':
                queryset = queryset.filter(is_service=True)
            elif params['identity'] == 'norm':
                queryset = queryset.exclude(is_seller=True, is_service=True)
        
        if 'search' in params.keys():
            queryset = queryset.filter(Q(mobile__icontains=params['search'])|Q(nickname__icontains=params['search'])|
                                       Q(company__icontains=params['search'])|Q(mail__icontains=params['search'])
                                    )

        return api_paging(queryset,request,CustomerSerializers)

@api_view(['GET'])
@checkToken
def get_customer(request, token=None):
    '''
    获取客户详细信息,包括子账户
    '''
    customer = request.user
    serializer = CustomerDetailInfoSerializers(customer)
    return JsonResponse(data=serializer.data)

class Login(APIView):
    '''
    登陆,并获取token
    '''
    coreapi_fields = (
        DocParam('mobile',description=u'手机号'),
        DocParam('password',description=u'登陆密码')
    )

    def post(self, request):
        params = get_parameter_dic(request)
        for field in self.coreapi_fields:
            if field.name not in params.keys():
                return JsonResponse(code=400,desc=u'%s不能为空'%field.description)

        try:
            user = Customer.objects.get(mobile=params['mobile'])
            if not user.contrast_password(params['password']):
                return JsonResponse(code=403,desc=u'密码错误')
            else:
                token = customer_auth.objects.get_or_create(customer=user)
                serializer = CustomerSerializers(user)
                data = serializer.data
                data['token'] = token.token
                return JsonResponse(data=data)
        except Customer.DoesNotExist:
            return JsonResponse(code=400,desc=u'该手机号未注册')
        except Exception as e:
            log(request,e,obj='Customer')
            return JsonResponse(code=400,desc=u'内部错误')

@api_view(['GET'])
@checkToken
def logout(request, token = None):
    '''
    获取客户详细信息,包括子账户
    '''
    try:
        token = customer_auth.objects.get(token=token)
        token.delete()
    except customer_auth.DoesNotExist:
        return JsonResponse(desc=u'你还未登陆')
        
    return JsonResponse(desc=u'成功登出')

class Register(APIView):
    '''
    快速注册
    '''

    coreapi_fields = (
        DocParam('mobile',description=u'手机号'),
        DocParam('password',description=u'登陆密码'),
        DocParam('captcha',description=u'验证码'),
        DocParam('key',description=u'key值,对应/api/sms/smscaptcha接口返回的data')
    )

    def post(self, request):
        params = get_parameter_dic(request)
        for field in self.coreapi_fields:
            if field.name not in params.keys():
                return JsonResponse(code=400,desc=u'%s不能为空'%field.description)
        
        from django.contrib.sessions.models import Session
        try:
            s = Session.objects.get(session_key=params['key'])
            s = s.get_decoded()
            s = s['captcha']
        except Session.DoesNotExist:
            return JsonResponse(code=400,desc=u'key验证失败')
        
        code = s['code']
        time = datetime.strptime(s['EXPIRE'],'%Y-%m-%d %H:%M:%S')        
        if datetime.now() > time:
            return JsonResponse(code=400,desc='短信验证码已超时')
        if params['captcha'] != code or params['mobile'] != s['phone']:
            return JsonResponse(code=400,desc='短信验证码不正确')

        if Customer.objects.filter(mobile=params['mobile']).exists():
            return JsonResponse(code=400,desc=u'该手机号已经注册')

        try:
            cust = Customer(mobile=params['mobile'])
            cust = cust.set_password(params['password'])
            cust.save()
            serializer = CustomerSerializers(cust)
            return JsonResponse(data=serializer.data)
        except Exception as e:
            raise e


        
        