#encoding:utf-8
'''
账款实体类
'''
import uuid
from django.db import models
from order.models import Order
from user.models import Customer
from system.models import SysUser
from django.db import transaction
from django.dispatch import receiver
from django.db.models.signals import post_delete,post_save

# Create your models here.
class Credit(models.Model):
    '''
    记账记录类
    '''
    id         = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    buessini   = models.ForeignKey(Customer,on_delete=models.CASCADE,related_name='buessini_credit',db_constraint=False,verbose_name='记账用户')
    order      = models.OneToOneField(Order,on_delete=models.CASCADE,verbose_name='关联订单')
    amt        = models.FloatField(default=0,verbose_name='记账金额')
    is_paid    = models.BooleanField(default=False,verbose_name=u'是否支付')
    created_at = models.DateTimeField(auto_now_add=True,verbose_name='记账时间')
    closed_at  = models.DateTimeField(null=True,blank=True,verbose_name='核销时间')
    receipt    = models.ForeignKey('Receipt',null=True,on_delete=models.SET_NULL,default=None,verbose_name=u'收款单')

    class Meta:
        verbose_name = u'记账记录'
        verbose_name_plural = verbose_name

class Receipt(models.Model):
    '''
    收款记录
    '''
    id         = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer   = models.ForeignKey(Customer,on_delete=models.CASCADE,related_name='buessini_receipt',db_constraint=False,verbose_name='付款企业')
    amt        = models.FloatField(default=0,verbose_name='付款金额')
    balance    = models.FloatField(default=0,verbose_name='核销后剩余')
    created_at = models.DateTimeField(auto_now_add=True,verbose_name='付款时间')
    closed_at  = models.DateTimeField(null=True,blank=True,verbose_name='核销时间')
    receipt_by = models.ForeignKey(SysUser,null=True,on_delete=models.SET_NULL,db_constraint=False,verbose_name='收款人')

    def __str__(self):
        return str(self.customer)+' '+str(self.amt)+'元'

    class Meta:
        verbose_name = u'收款记录'
        verbose_name_plural = verbose_name

@receiver(post_save, sender=Receipt)
@transaction.atomic()
def receipt_post_save_receiver(sender, created, instance, **kwargs):
    '''
    核销记账单
    返回当前收款单
    '''
    from datetime import datetime
    try:
        receipts = Receipt.objects.filter(Q(balance__gte=0)|Q(id=receipt.id)).values("id","Amt","balance")
        rlist = list(receipts)
        clist = list(Credit.objects.select_related().filter(Buessini=cust,is_paid=False,Closed_At__isnull=True).values("id","Amt").order_by('Created_At'))
        crlist = []
        cclist = []
        balance = 0
        if len(clist) > 0:
            for r in rlist:
                balance += float(r['balance'])
                for c in clist:
                    if balance >= float(c['Amt']):
                        balance = balance - float(c['Amt'])
                        cclist.append(c['id'])                            
                        credit = Credit.objects.get(id=c['id'])#.update(is_paid=True,Closed_At=datetime.now(),receipt_id=)
                        credit.is_paid = True
                        credit.closed_at = datetime.now()
                        credit.receipt_id = r['id']
                        credit.save()
                        if balance == 0:
                            crlist.append(r['id'])
                    else:
                        cclist.append(c['id'])
                        break            
            
        if len(crlist) > 0:
            Receipt.objects.filter(id__in=crlist).update(balance=0,closed_at=datetime.now())
        if len(cclist) > 0:
            Order.objects.filter(credit__id__in=cclist).update(is_paied=True)
        
        Receipt.objects.filter(id=instance.id).update(balance = balance)
        # instance.balance = balance
        # instance.save()

        #return instance

    except Exception as e:
        raise e

@receiver(post_delete, sender=Receipt)
@transaction.atomic()
def receipt_post_delete_receiver(sender, instance, **kwargs):
    '''
    删除收款单后,撤回自动核销的部分
    '''
    try:
        instance.credit_set.all().update(closed_at=None,is_paid=False)
        Order.objects.filter(credit__receipt=instance).update(is_paied=False)
    except Exception as e:
        raise e