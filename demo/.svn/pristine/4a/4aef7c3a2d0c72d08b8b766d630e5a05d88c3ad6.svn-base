#encoding:utf-8
'''
客户实体类
'''
import uuid
from django.db import models
from django.conf import settings
from extra.storage import ImageStorage
from django.utils.html import format_html
from django.dispatch import receiver
from django.db.models.signals import post_save,post_delete
# Create your models here.

def avatar_to(instance, filename):
    '''
    指定头像的上传地址
    '''
    import os 
    return os.sep.join([settings.MEDIA_ROOT, 'upload', 'avatar', str(instance.id), filename])

#用户数据表
class Customer(models.Model):
    '''
    用户数据
    '''
    STATIC_CHOICE = (
        (0,u'停用'),
        (1,u'启用'),
    )
    id                 = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    parent             = models.ForeignKey('self',blank=True,null=True,on_delete=models.CASCADE,db_constraint=False,verbose_name='所属用户')
    mobile             = models.CharField(max_length=15,null=False,unique=True,verbose_name='手机号')
    password           = models.BinaryField (max_length=255,null=False,verbose_name='密码')
    nickname           = models.CharField(max_length=30,db_index=True,null=True,verbose_name='姓名')
    grade              = models.FloatField(default=1,verbose_name='评级')#默认为1,最高为5
    is_seller          = models.BooleanField(default=False,verbose_name=u'商家用户')
    is_service         = models.BooleanField(default=False,verbose_name=u'服务商用户')
    company            = models.CharField(max_length=50, null=True, blank=True ,verbose_name=u'公司名称') #用户入驻申请被通过后回写    
    idcard             = models.CharField(max_length=20,null=True,unique=True,db_index=True,verbose_name='身份证号')
    inhabitancycard    = models.CharField(max_length=30,null=True,blank=True,verbose_name='居住证')
    drivinglicense     = models.CharField(max_length=25,unique=True,null=True,verbose_name='驾驶证号')
    qq                 = models.CharField(max_length=20,null=True,blank=True,verbose_name='QQ')
    wechat             = models.CharField(max_length=100,null=True,blank=True,verbose_name='微信号')
    email              = models.CharField(max_length=150,null=True,blank=True,verbose_name='电子邮件')
    age                = models.IntegerField(default=18,verbose_name='年龄')
    workingtime        = models.FloatField(default=0,verbose_name='从业时间')
    emergencycontact   = models.CharField(max_length=30,db_index=True,null=True,blank=True,verbose_name='紧急联络人')
    emergencyphone     = models.CharField(max_length=30,db_index=True,null=True,blank=True,verbose_name='紧急联络人电话')
    avatar             = models.ImageField(max_length=255,upload_to=avatar_to,verbose_name='头像',null=True,blank=True,default='',storage=ImageStorage())
    status             = models.IntegerField(choices=STATIC_CHOICE,null=False,default=0,verbose_name='状态') #-1:停用,1是启用 -2已删除
    deposit            = models.FloatField(default=0,verbose_name='保证金')
    money              = models.FloatField(default=0,verbose_name='余额')
    created_at         = models.DateTimeField(auto_now_add=True,verbose_name='创建时间',null=True)
    created_by         = models.ForeignKey('system.SysUser',null=True,on_delete=models.SET_NULL,db_constraint=False, editable=False,verbose_name='创建人', related_name='customer_created_by')
    updated_at         = models.DateTimeField(auto_now=True,verbose_name='修改时间',null=True)
    updated_by         = models.ForeignKey('system.SysUser',null=True,on_delete=models.SET_NULL,db_constraint=False, editable=False,verbose_name='修改人', related_name='customer_updated_by')

    def __str__(self):
        if self.company is not None:
            return self.company
        elif self.nickname is not None:
            return self.nickname
        elif self.mobile is not None:
            return self.mobile
        else:
            return None

    def set_password(self,password):
        import hashlib
        pwd    = hashlib.sha1(password.encode('utf8')).hexdigest()
        pwd    = bytes(pwd, encoding = "utf8")
        self.Password = pwd
        return self

    def other(self):
        '''
        整合用户基础信息
        '''
        return format_html(
            '<p><span>{}</span></p>\
            <p><span>{}</span></p>\
            <p><span>{}</span></p>\
            <p><span>{}</span></p>\
            <p><span>{}</span></p>\
            <p><span>{}</span></p>\
            <p><span>{}</span></p>',
            '身份证号 : ' + self.idcard if self.idcard is not None else '',
            'QQ : ' + self.qq if self.qq is not None else '',
            '微信号 : ' + self.wechat if self.wechat is not None else '',
            '电子邮件 : ' + self.email if self.email is not None else '',
            '年龄 : ' + str(self.age) if self.age is not None else '',
            '从业时间 : '+ str(self.workingtime) if self.workingtime is not None else '',
            '紧急联络人 : ' + self.emergencycontact if self.emergencycontact is not None else '' + ('(' + self.emergencyphone + ')' if self.emergencyphone is not None else ''),
            '地址 : '+ self.address if self.address is not None else ''
        )

    other.short_description = u'基础信息'

    class Meta:
        db_table = 'Customer'
        verbose_name = u'普通用户管理'
        verbose_name_plural = verbose_name

class ServicerCustomer(Customer):
    class Meta:
        verbose_name = u"师傅管理"
        verbose_name_plural = verbose_name
        proxy = True   # 设置True只在xadmin中生存2个model管理，不生产数据表

class SellerCustomer(Customer):
    class Meta:
        verbose_name = u"商家管理"
        verbose_name_plural = verbose_name
        proxy = True   # 设置True只在xadmin中生存2个model管理，不生产数据表

@receiver(post_save, sender=Customer)
def customer_post_save_receiver(sender, created, instance, **kwargs):
    '''
    保存用户数据之后执行
    如果新增时,密码为空则创建默认密码123456
    '''
    if created:
        if instance.password is None:
            instance.password = instance.set_password('123456')
            instance.save()

@receiver(post_delete, sender=Customer)
def customer_post_delete_receiver(sender, instance, **kwargs):
    '''
    删除用户后执行
    如果用户有设置头像,同时删除文件
    '''
    import os
    import shutil
    path = os.sep.join([settings.MEDIA_ROOT, 'upload', 'avatar', str(instance.id)])
    if os.path.exists(path):
        shutil.rmtree(path)

#地址管理
class Address(models.Model):
    '''
    客户地址管理
    '''
    id         = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer   = models.ForeignKey(Customer,null=False,on_delete=models.CASCADE,verbose_name=u'所属用户')
    province   = models.CharField(max_length=50,null=False,verbose_name=u'省市区')
    city       = models.CharField(max_length=50,null=False,verbose_name=u'地级市')
    region     = models.CharField(max_length=50,null=False,verbose_name=u'区县')
    address    = models.CharField(max_length=200,null=True,verbose_name='地址')
    is_recive  = models.BooleanField(blank=True,db_index=True,default=False,verbose_name=u'收货地址')
    is_pickup  = models.BooleanField(blank=True,db_index=True,default=False,verbose_name=u'发货地址')
    is_default = models.BooleanField(blank=True,db_index=True,default=False,verbose_name=u'默认')


    def __str__(self):
        str = ''
        if self.province is not None:
            str += self.province
        if self.city is not None:
            str += self.city
        if self.region is not None:
            str += self.region
        if self.address is not None:
            str += self.address
        return str

    class Meta:
        verbose_name = u'地址管理'
        verbose_name_plural = verbose_name

#收付款账号表
class PaymentInfo(models.Model):
    '''
    付款账号
    '''
    TYPE_CHOICE = (
        (u'alipay',u'支付宝'),
        (u'wechat',u'微信'),
        (u'union',u'银联'),
        (u'sys',u'系统账户'),
    )
    id          = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer    = models.ForeignKey('Customer',on_delete=models.CASCADE,default=None,db_constraint=False,related_name='payinfo_customer',verbose_name=u'所属用户')
    accounttype = models.CharField(max_length=10,null=False,db_index=True,default='alipay',verbose_name='账号类型',choices = TYPE_CHOICE)
    bankname    = models.CharField(max_length=35,null=True,verbose_name='开户行')
    accountname = models.CharField(max_length=50,null=False,verbose_name='账户名',default='')
    account     = models.CharField(max_length=35,unique=True,db_index=True,verbose_name=u'账号')
    is_default  = models.BooleanField(blank=True,db_index=True,default=False,verbose_name=u'默认')
    created_at  = models.DateTimeField(auto_now_add=True,verbose_name='创建时间',null=True)
    createdby   = models.ForeignKey('Customer',null=True,on_delete=models.SET_NULL,db_constraint=False,verbose_name='创建人',related_name='payment_created_by')
    updated_at  = models.DateTimeField(auto_now=True,verbose_name='修改时间',null=True)
    updatedby   = models.ForeignKey('Customer',null=True,on_delete=models.SET_NULL,db_constraint=False,verbose_name='修改人',related_name='payment_updated_by')
    
    def __str__(self):
        if(self.id is not None):  
            if self.accounttype == 'union':
                return self.bankname+'('+self.account+','+self.accountname+')'
            else:
                return self.accountname+'('+self.account+')'
        else:
            return None

    class Meta:
        db_table = 'PaymentInfo'
        verbose_name = u'付款账号'
        verbose_name_plural = verbose_name

class ReceiveInfo(PaymentInfo):
    '''
    收款账号管理
    '''
    class Meta:
        verbose_name = u"收款账号"
        verbose_name_plural = verbose_name
        proxy = True   # 设置True只在xadmin中生存2个model管理，不生产数据表

#客户/服务商的汽车管理
class Car(models.Model):
    '''
    客户/服务商的汽车管理
    '''
    id             = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    customer       = models.ForeignKey(Customer,null=True,on_delete=models.CASCADE,verbose_name=u'所属用户')
    car_number     = models.CharField(max_length=10,null=False,unique=True,verbose_name=u'车牌号')
    is_cold_chain  = models.BooleanField(default=False,verbose_name=u'是否冷链车')

    def __str__(self):
        return self.car_number

    class Meta:
        db_table='Car'
        verbose_name = u'汽车管理'
        verbose_name_plural = verbose_name