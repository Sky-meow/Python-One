#encoding:utf-8
'''
系统设置实体
'''
import uuid
from django.db import models
from extra.storage import ImageStorage
from django.utils.html import format_html
from django.core.exceptions import ValidationError
from django.contrib.auth.models import AbstractUser
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import gettext_lazy as _
from django.dispatch import receiver
from django.db.models.signals import pre_save
# Create your models here.

class Config(models.Model):
    '''
    系统设置
    '''
    TYPE_CHOICE = (
        (u'text',u'文本'),
        (u'bool',u'是否'),
        (u'int',u'整形'),
        (u'float',u'数字,有小数点'),
    )
    id           = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    compid       = models.BigIntegerField(null=True)
    type         = models.CharField(max_length=150,null=False,verbose_name=u'配置分类')
    label        = models.CharField(max_length=150,null=False,verbose_name=u'显示名称',default='')
    path         = models.CharField(max_length=150,null=False,db_index=True,unique=True,verbose_name=u'配置名称')
    value        = models.CharField(max_length=150,null=False,verbose_name=u'值')
    valuetype    = models.CharField(max_length=15,choices = TYPE_CHOICE,verbose_name=u'类型')
    enable       = models.BooleanField(default=True,verbose_name=u'是否启用')
    created_at   = models.DateTimeField(auto_now_add=True,verbose_name='创建时间',null=True)
    created_by   = models.ForeignKey('SysUser',null=True,on_delete=models.SET_NULL,db_constraint=False,verbose_name='创建人',related_name='config_created_by')
    updated_at   = models.DateTimeField(auto_now=True,verbose_name='修改时间',null=True)
    updated_by   = models.ForeignKey('SysUser',null=True,on_delete=models.SET_NULL,db_constraint=False,verbose_name='修改人',related_name='config_updated_by')

    def __str__(self):
        return self.path + '(' + self.type + ')'

    def clean(self):
        '''
        根据数据类型验证值
        '''
        if self.valuetype == 'bool' or self.valuetype == 'int' or self.valuetype == 'float':
            if not self.value.isdigit():
                raise ValidationError({'value':u'当类型为"是否","整数","数组"时,不能输入非数字的内容'})

    # def value_disp(self):
    #     if self.valuetype == 'bool':
    #         if bool(self.value):
    #             return format_html('<i class="fa fa-check-circle text-success" alt="True"></i>')
    #         else:
    #             return format_html('<i class="fa fa-times-circle text-error" alt="False"></i>')
    #     else:
    #         return self.value

    # value_disp.short_description = u'值'

    class Meta:
        db_table='SysConfig'
        verbose_name = u'系统配置'
        verbose_name_plural = verbose_name

@receiver(pre_save, sender=Config)
def Config_pre_save_receiver(sender, instance, **kwargs):
    '''
    保存配置前处理数据
    '''
    if instance.valuetype == 'bool':
        instance.value = 1 if int(instance.value) > 0 else 0
    
def avatar_to(instance, filename):
    '''
    指定头像的上传地址
    '''
    from django.conf import settings
    import os 
    return os.sep.join([settings.MEDIA_ROOT, 'upload', 'avatar', 'admin', instance.id, filename])

class SysUser(AbstractUser):
    '''
    继承系统用户表并扩展
    '''
    mobile = models.CharField(max_length=11, default='', null=True, blank=True, verbose_name=u'手机号')
    avatar = models.ImageField(upload_to=avatar_to,verbose_name='头像',null=True, blank=True, default='',storage=ImageStorage())

    def __str__(self):
        return self.username

    class Meta:
        verbose_name = u'系统用户'
        verbose_name_plural = verbose_name

class db_permission(models.Model):
    '''
    数据权限
    '''
    pass