#encoding:utf-8

'''
商品的api集合
'''
import coreapi
from django.db import transaction
from api.response import api_paging, JsonResponse, log, DocParam, get_parameter_dic
from rest_framework import viewsets
from rest_framework.views import APIView
from rest_framework.decorators import (
    api_view,permission_classes, detail_route,action,list_route
)
from rest_framework.permissions import AllowAny
from material.models import *
from material.serializers import *

class get_child_types(APIView):
    '''
    获取当前类型的下级类型
    ---
    '''
    coreapi_fields = ()

    def get(self,request,pk=None):
        try:
            obj = MatType.objects.get(id=pk)
            childs = obj.mattype_set.all()
            serializer = MatTypeSerializers(childs, many=True)
            return JsonResponse(data=serializer.data)
        except MatType.DoesNotExist:
            return JsonResponse(code=400,desc=u'该类型已不存在')
        except Exception as e:
            log(request, repr(e), obj='material.get_child_types')
            return JsonResponse(code=400,desc=u'内部错误')

class get_erp_types(APIView):
    '''
    从ERP同步货品类别
    ---
    Parameters
    ---
    data 
    json对象 [
        {ID:1,Code:1,Name:'食品',Image:imageurl,UpCode:-1[,Upgrade:1]},
        {ID:2,Code:2,Name:'材料',Image:imageurl,UpCode:-1[,Upgrade:1]},
        ...
    ]
    如果Upgrade==1时,会根据ID去寻找对应的类型,有则修改,没有则根据Code的规则新增
    '''
    coreapi_fields = (DocParam('data',type='json',description=u'来自ERP的货品类别Json对象,data=[\
        {ID:1,Code:1,Name:"食品",Image:imageurl,UpCode:-1[,Upgrade:1]},\
        {ID:2,Code:2,Name:"材料",Image:imageurl,UpCode:-1[,Upgrade:1]},\
        ...\
    ]'),
    )
        
    @transaction.atomic()
    def post(self, request):        
        import json
        data = request.data['data']
        l = json.loads(data)
        from material.models import MatType
        new = []
        try:
            for item in l:
                if MatType.objects.filter(erp_id=item['ID']).exists():
                    if 'Upgrade' in item.keys() and bool(item['Upgrade']):
                        m = MatType.objects.get(erp_id=item['ID'])
                        m.code = item['Code']
                        m.name = item['Name']
                        m.image = item['Image']
                        if item['UpCode'] != '-1':
                            p = None
                            if not MatType.objects.filter(code=item['UpCode']).exists():
                                for index, i in enumerate(l):
                                    if i['Code'] == item['UpCode']:
                                        p = MatType(code=i['Code'],name=i['Name'],image=item['image'],erp_id=i['ID'],enable=True)
                                        p.save()
                                        del l[index]
                                        break
                            else:
                                p = MatType.objects.get(code=item['UpCode'])
                            if p is not None:
                                m.parent = p
                        m.save()
                else:
                    if item['UpCode'] == '-1':
                        m = MatType(code=item['Code'],name=item['Name'],image=item['Image'],erp_id=item['ID'],enable=True)
                        m.save()
                    else:
                        p = None
                        if not MatType.objects.filter(code=item['UpCode']).exists():
                            for index, i in enumerate(l):
                                if i['Code'] == item['UpCode']:
                                    p = MatType(code=i['Code'],name=i['Name'],image=item['image'],erp_id=i['ID'],enable=True)
                                    p.save()
                                    del l[index]
                                    break
                        else:
                            p = MatType.objects.get(code=item['UpCode'])

                        m = MatType(code=item['Code'],name=item['Name'],image=item['image'],erp_id=item['ID'],enable=True)
                        if p is not None:
                            m.parent = p
                        m.save()
            return JsonResponse()
        except Exception as e:
            raise e

@api_view(['GET'])
@transaction.atomic()
def get_erp_types_from_text(request):
    '''
    从文本文件导入类型到数据库
    内部使用,作废
    ---
    Parameters
    ---
    data 
    json对象 [
        {id:1,code:1,name:'食品',upcode:-1},
        {id:2,code:2,name:'材料',upcode:-1},
        ...
    ]
    '''
    return JsonResponse()
    # if 'path' not in request.query_params.keys():
    #     path = '/home/william/桌面/PUMT.txt'
    # else:
    #     path = request.query_params.get('path')

    # f = open(path, 'r')
    # import json
    # _str = f.read()
    # _str = _str.lstrip('﻿')
    # l = json.loads(_str)
    # from material.models import MatType
    # new = []
    # try:
    #     with transaction.atomic():
    #         for item in l:
    #             if MatType.objects.filter(code=item['Code']).exists():
    #                 pass
    #             else:
    #                 if item['UpCode'] == '-1':
    #                     m = MatType(code=item['Code'],name=item['Name'],erp_id=item['ID'],enable=True)
    #                     m.save()
    #                 else:
    #                     if not MatType.objects.filter(code=item['UpCode']).exists():
    #                         for index, i in enumerate(l):
    #                             if i['Code'] == item['UpCode']:
    #                                 p = MatType(code=i['Code'],name=i['Name'],erp_id=i['ID'],enable=True)
    #                                 p.save()
    #                                 del l[index]
    #                                 break
    #                     else:
    #                         p = MatType.objects.get(code=item['UpCode'])

    #                     m = MatType(parent=p, code=item['Code'],name=item['Name'],erp_id=item['ID'],enable=True)
    #                     m.save()
    #     return JsonResponse()
    # except Exception as e:
    #     raise e

class delete_erp_types(APIView):
    '''
    通过传入对应的ERP_id删除商品类型    
    ---
    Parameters
    ---
    要删除的erpid集合 ids = [] or ids = string() 多个id用英文','隔开
    '''
    coreapi_fields = (DocParam('ids',type='string/list',description=u'要删除的erpid集合 {"ids":[1,2,3,4]} or ids = "1,2,3,4" 多个id用英文","隔开'),)
    
    @transaction.atomic()
    def post(self, request):
        params = get_parameter_dic(request)
        ids = params.get('ids')
        if type(ids) == str:
            ids = ids.split(',')
        elif type(ids) == list:
            pass
        else:
            return JsonResponse(code=400,desc=u'参数的格式不正确,请参照字段说明')